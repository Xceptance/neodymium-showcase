##############################################################################
##
## log4j2 Settings
##
## The log4j2 configuration used by Neodymium when running the tests.
##
##############################################################################
###
### logger - collects log information
### appender - sends it to an output destination, is attached to the logger
### rootLogger - always exists and is at the top of any logger hierarchy (like Object.class in java)
### If no configuration has been defined, it is automatically generated with
### - rootLogger.level = error
### - rootLogger.appenderRef.console.ref = STDOUT

### status - level of internal Log4j2 events logged to the console
### Use it to debug the log4j2 logging.
# status = trace

### Configuration name
name = NeodymiumConfiguration

### name of the root package
property.projectPath = showcase

property.filename = target/log/AllTests-log4j2.log
property.filename1 = target/log/FirstTest-log4j2.log
property.filename2 = target/log/SecondTest-log4j2.csv

appender.console.type = Console
appender.console.name = STDOUT
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss} %-5level %m %n
appender.console.filter.threshold.type = ThresholdFilter
appender.console.filter.threshold.level = warn

appender.file.type = File
appender.file.name = FILE
appender.file.append = true
appender.file.fileName = ${filename}
appender.file.layout.type = PatternLayout
appender.file.layout.pattern = %d{yyyy-MM-dd HH:mm:ss} %m%n
appender.file.filter.threshold.type = ThresholdFilter
appender.file.filter.threshold.level = trace

### BEGIN BLOCK for special logging configuration
### Comment out this block to run a simple logging into console and one file
### With this special configuration, a separate log file can be written for each test case.
appender.file1.type = File
appender.file1.name = FILE1
appender.file1.append = true
appender.file1.fileName = ${filename1}
appender.file1.layout.type = PatternLayout
appender.file1.layout.pattern = %d{yyyy-MM-dd HH:mm:ss} %m%n

logger.file1.name = ${projectPath}.neodymium.tests.logging.LoggingFirstTest
logger.file1.level = debug
### If it is true (default value) the parent logger (root) is also referenced
### and the output will be forwarded to FILE and STDOUT rootLogger to.
logger.file1.additivity = true
logger.file1.appenderRef.file1.ref = FILE1

### On the other hand, you can set it to false to make the output even more differentiated:
#logger.file1.additivity = false
### This will send the output to FILE1 and FILE but NOT to STDOUT
### The name for file_a or file_b can be freely chosen but must be different
#logger.file1.appenderRef.file_a.ref = FILE1
#logger.file1.appenderRef.file_b.ref = FILE

### This will send the output to FILE1 and STDOUT but NOT to FILE
#logger.file1.additivity = false
#logger.file1.appenderRef.file1.ref = FILE1
#logger.file1.appenderRef.console.ref = STDOUT

appender.file2.type = File
appender.file2.name = FILE2
appender.file2.append = true
appender.file2.fileName = ${filename2}
appender.file2.layout.type = PatternLayout
### This pattern is used to create a CSV file with semicolons as a separator.
### It contains: Day;Time;TestClass;testMethod;Message
appender.file2.layout.pattern = %d{yyyy-MM-dd};%d{HH:mm:ss};%c{1};%M;%m %n

logger.file2.name = ${projectPath}.neodymium.tests.logging.LoggingSecondTest
logger.file2.level = info
logger.file2.additivity = true
logger.file2.appenderRef.file2.ref = FILE2
### END BLOCK for special logging configuration

### default rootLogger.level = error 
rootLogger.level = fatal
rootLogger.appenderRef.file.ref = FILE
rootLogger.appenderRef.console.ref = STDOUT
